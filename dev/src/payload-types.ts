/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    examples: Example;
    users: User;
    tests: Test;
    media: Media;
    forms: Form;
    'form-submissions': FormSubmission;
    'pdf-templates': PdfTemplate;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    'pdf-header': PdfHeader;
    'pdf-footer': PdfFooter;
    'pdf-watermarks': PdfWatermark;
    'pdf-fonts': PdfFont;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "examples".
 */
export interface Example {
  id: string;
  someField?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tests".
 */
export interface Test {
  id: string;
  someField?: string | null;
  sampleArray?:
    | {
        sampleText?: string | null;
        sampleTextArea?: string | null;
        sampleRichText?:
          | {
              [k: string]: unknown;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  sampleGroup?: {
    sampleDate?: string | null;
    sampleEmail?: string | null;
    /**
     * @minItems 2
     * @maxItems 2
     */
    samplePoints?: [number, number] | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?:
              | {
                  [k: string]: unknown;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  redirect?: {
    url: string;
  };
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        message?:
          | {
              [k: string]: unknown;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pdf-templates".
 */
export interface PdfTemplate {
  id: string;
  title?: string | null;
  assignedCollections?: ('examples' | 'tests') | null;
  pageOptions: {
    orientation?: ('portrait' | 'landscape') | null;
    pageSize?:
      | (
          | 'letter'
          | 'government-letter'
          | 'legal'
          | 'junior-legal'
          | 'ledger'
          | 'tabloid'
          | 'credit-card'
          | 'a0'
          | 'a1'
          | 'a2'
          | 'a3'
          | 'a4'
          | 'a5'
          | 'a7'
          | 'a8'
          | 'a9'
          | 'a10'
          | 'b0'
          | 'b1'
          | 'b2'
          | 'b3'
          | 'b4'
          | 'b5'
          | 'b6'
          | 'b7'
          | 'b8'
          | 'b9'
          | 'b10'
          | 'c0'
          | 'c1'
          | 'c2'
          | 'c3'
          | 'c4'
          | 'c5'
          | 'c6'
          | 'c7'
          | 'c8'
          | 'c9'
          | 'c10'
          | 'd1'
          | 'custom'
        )
      | null;
    customPageSize?: {
      length: number;
      width: number;
    };
    margins: {
      topMargin: number;
      bottomMargin: number;
      leftMargin: number;
      rightMargin: number;
    };
  };
  layoutOptions?: {
    headerLayout?: string | null;
    footerLayout?: string | null;
    watermark?: string | null;
  };
  fontOptions: {
    defaultFontSize?: number | null;
    fonts?: ('test' | 'test2')[] | null;
    defaultTextColor: string;
  };
  pathOptions: {
    defaultFillColor: string;
    defaultStrokeColor: string;
    defaultLineColor: string;
    defaultStrokeWidth?: number | null;
    defaultLineWidth?: number | null;
    defaultLineCapStyle?: string | null;
    defaultLineJoinStyle?: string | null;
  };
  fileOptions?: {
    buttonBehavior?: ('download' | 'newTab' | 'curTab' | 'autoprint') | null;
    fileNameField?: string | null;
  };
  useEncryption?: boolean | null;
  encryptionSettings?: {
    userPassword?: string | null;
    ownerPassword?: string | null;
    userPermissions?: ('print' | 'modify' | 'copy' | 'annot-forms')[] | null;
  };
  defaultDisplayMode?: {
    zoom?: ('fullwidth' | 'fullheight' | 'fullpage' | 'original') | null;
    layout?: ('continuous' | 'single' | 'twoleft' | 'tworight') | null;
    outlineDisplay?: ('none' | 'UseOutlines' | 'UseThumbs') | null;
  };
  fields?: (PDFImage | PDFPath | PDFSection | PDFTable | PDFText)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PDFImage".
 */
export interface PDFImage {
  imageSource?: (string | null) | Media;
  pdfElementPlacement?: {
    xPosition?: number | null;
    yPosition?: number | null;
  };
  width?: number | null;
  height?: number | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pdfImage';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PDFPath".
 */
export interface PDFPath {
  pdfStrokeColor?: string | null;
  pdfFillColor?: string | null;
  pdfClosedPath?: boolean | null;
  pathSourceField?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pdfPath';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PDFSection".
 */
export interface PDFSection {
  sourceField?: string | null;
  sectionOrientation: 'horizontal' | 'vertical';
  sectionWidth?: number | null;
  sectionHeight?: number | null;
  topDivider?: boolean | null;
  bottomDivider?: boolean | null;
  leftDivider?: boolean | null;
  rightDivider?: boolean | null;
  sectionFields?:
    | {
        sourceField?: string | null;
        label?: string | null;
        textConfiguration?: {
          multilineText?: boolean | null;
          multilineWidth?: ('100pw' | '50pw' | '33pw' | '25pw' | '100sw' | '50sw' | '33sw' | '25sw' | 'fill') | null;
          pdfElementPlacement?: {
            xPosition?: number | null;
            yPosition?: number | null;
          };
          justification?: ('left' | 'center' | 'right' | 'justify') | null;
          baseline?: ('alphabetic' | 'ideographic' | 'bottom' | 'top' | 'middle' | 'hanging') | null;
          pdfElementRotation?: {
            rotateElement?: boolean | null;
            angle?: number | null;
            rotationDirection?: ('0' | '1') | null;
          };
          characterSpacing?: number | null;
          lineHeightFactor?: number | null;
          textColorOverride?: boolean | null;
          textColor?: string | null;
          fontOverride?: boolean | null;
          fontSelection?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pdfSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PDFTable".
 */
export interface PDFTable {
  sourceField?: string | null;
  tableTitle?: string | null;
  pdfElementPlacement?: {
    xPosition?: number | null;
    yPosition?: number | null;
  };
  columnSetup?: {
    printHeaders?: boolean | null;
    autoSizeColumns?: boolean | null;
    headerFontSize?: number | null;
    cellFontSize?: number | null;
    columns?:
      | {
          sourceField?: string | null;
          headerLabel?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'pdfTable';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PDFText".
 */
export interface PDFText {
  sourceField?: string | null;
  label?: string | null;
  textConfiguration?: {
    multilineText?: boolean | null;
    multilineWidth?: ('100pw' | '50pw' | '33pw' | '25pw' | '100sw' | '50sw' | '33sw' | '25sw' | 'fill') | null;
    pdfElementPlacement?: {
      xPosition?: number | null;
      yPosition?: number | null;
    };
    justification?: ('left' | 'center' | 'right' | 'justify') | null;
    baseline?: ('alphabetic' | 'ideographic' | 'bottom' | 'top' | 'middle' | 'hanging') | null;
    pdfElementRotation?: {
      rotateElement?: boolean | null;
      angle?: number | null;
      rotationDirection?: ('0' | '1') | null;
    };
    characterSpacing?: number | null;
    lineHeightFactor?: number | null;
    textColorOverride?: boolean | null;
    textColor?: string | null;
    fontOverride?: boolean | null;
    fontSelection?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'pdfText';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pdf-header".
 */
export interface PdfHeader {
  id: string;
  headerLayouts?:
    | {
        layoutName: string;
        layout?: (PDFHeaderSection | PDFImage | PDFHeaderPath | PDFHeaderText)[] | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PDFHeaderSection".
 */
export interface PDFHeaderSection {
  sectionOrientation: 'horizontal' | 'vertical';
  sectionWidth?: number | null;
  sectionHeight?: number | null;
  topDivider?: boolean | null;
  bottomDivider?: boolean | null;
  leftDivider?: boolean | null;
  rightDivider?: boolean | null;
  sectionFields?:
    | {
        fieldLabel?: string | null;
        fieldValue: string;
        textConfiguration?: {
          multilineText?: boolean | null;
          multilineWidth?: ('100pw' | '50pw' | '33pw' | '25pw' | '100sw' | '50sw' | '33sw' | '25sw' | 'fill') | null;
          pdfElementPlacement?: {
            xPosition?: number | null;
            yPosition?: number | null;
          };
          justification?: ('left' | 'center' | 'right' | 'justify') | null;
          baseline?: ('alphabetic' | 'ideographic' | 'bottom' | 'top' | 'middle' | 'hanging') | null;
          pdfElementRotation?: {
            rotateElement?: boolean | null;
            angle?: number | null;
            rotationDirection?: ('0' | '1') | null;
          };
          characterSpacing?: number | null;
          lineHeightFactor?: number | null;
          textColorOverride?: boolean | null;
          textColor?: string | null;
          fontOverride?: boolean | null;
          fontSelection?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pdfHeaderSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PDFHeaderPath".
 */
export interface PDFHeaderPath {
  pdfStrokeColor?: string | null;
  pdfFillColor?: string | null;
  pdfClosedPath?: boolean | null;
  pathData?:
    | {
        pathName?: string | null;
        data?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pdfHeaderPath';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PDFHeaderText".
 */
export interface PDFHeaderText {
  fieldLabel?: string | null;
  value: string;
  textConfiguration?: {
    multilineText?: boolean | null;
    multilineWidth?: ('100pw' | '50pw' | '33pw' | '25pw' | '100sw' | '50sw' | '33sw' | '25sw' | 'fill') | null;
    pdfElementPlacement?: {
      xPosition?: number | null;
      yPosition?: number | null;
    };
    justification?: ('left' | 'center' | 'right' | 'justify') | null;
    baseline?: ('alphabetic' | 'ideographic' | 'bottom' | 'top' | 'middle' | 'hanging') | null;
    pdfElementRotation?: {
      rotateElement?: boolean | null;
      angle?: number | null;
      rotationDirection?: ('0' | '1') | null;
    };
    characterSpacing?: number | null;
    lineHeightFactor?: number | null;
    textColorOverride?: boolean | null;
    textColor?: string | null;
    fontOverride?: boolean | null;
    fontSelection?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'pdfHeaderText';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pdf-footer".
 */
export interface PdfFooter {
  id: string;
  footerLayouts?:
    | {
        layoutName: string;
        topDivider?: boolean | null;
        pageNumbers?: boolean | null;
        companyName?: boolean | null;
        contactInfo?: boolean | null;
        backgroundSettings?: {
          layoutBackground?: ('blank' | 'solid' | 'image') | null;
          backgroundImage?: string | Media | null;
          width?: number | null;
          height?: number | null;
          footerFillColor?: string | null;
          horizontalMargin?: number | null;
          verticalMargin?: number | null;
        };
        dividerSettings?: {
          dividerStrokeColor?: string | null;
          dividerThickness?: number | null;
          horizontalMargin?: number | null;
          verticalMargin?: number | null;
        };
        pageNumberSettings?: {
          format?: string | null;
          collate?: boolean | null;
          footerLocation?: ('left' | 'center' | 'right') | null;
        };
        companyNameSettings?: {
          companyName?: string | null;
          footerLocation?: ('left' | 'center' | 'right') | null;
        };
        contactInfoSettings?: {
          phoneNumber?: string | null;
          email?: string | null;
          address?: string | null;
          footerLocation?: ('left' | 'center' | 'right') | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pdf-watermarks".
 */
export interface PdfWatermark {
  id: string;
  watermarks?:
    | {
        watermarkName: string;
        watermark: string | Media;
        width?: number | null;
        height?: number | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pdf-fonts".
 */
export interface PdfFont {
  id: string;
  fontList?:
    | {
        fontFile?: string | Media | null;
        fontName?: string | null;
        fontWeight?: ('bold' | 'italic' | 'normal' | 'bolditalic') | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}